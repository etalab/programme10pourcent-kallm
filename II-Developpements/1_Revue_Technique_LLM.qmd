---
title: "Guide du LLM"
author: "équipe KALLM"
date: "2024-06-07"
format: html
---

# Guide du LLM

## PARTIE II. Développements autour des LLMs (pour les data scientists)

### I. Revue technique de l’état de l’art LLM (Malo Jérôme)


#### 1. Principe pré-entraînement / fine-tuning

Les LLMs reposent sur un développement en deux voire trois étapes.
- **Le pré-entraînement** consiste à entraîner le modèle, en partant de zéro, de façon auto-supervisée, et sur un corpus d'entraînement gigantesque. L'objectif de ce pré-entraînement dépend du type de modèle utilisé (cf. paragraphe suivant), mais la plupart apprennent à prédire le token suivant, à partir d'une suite de tokens. C'est ce qui les rend particulièrement efficaces pour de la génération de texte.

- **L'instruction-tuning** permet d'adapter le modèle pré-entraîné à une plus grande diversité de tâches. Dans de nombreux cas (chatbot, résumé de texte, etc.), la prédiction du token suivant n'est pas la bonne stratégie. L'étape d'instruction-tuning permet ainsi, grâce à un entraînement supervisé, de créer une version « chat » du modèle. Pour donner un exemple connu de tous, ChatGPT est la version instruction-tunée de GPT-4.

- **Le fine-tuning** (optionnel) peut être utilisé pour adapter le modèle à une tâche et à des données spécifiques. Les LLMs étant des outils multitâches, souvent multilingues et multidomaines, leurs performances peuvent être dégradées lorsqu'il y a des exigences précises et spécifiques. Le fine-tuning est une nouvelle phase d'entraînement supervisé, nécessitant moins de données et de puissance de calcul, qui permet de spécialiser le modèle.


Par leur taille et les exigences techniques qu'ils impliquent, seules quelques entreprises spécialisées ont les moyens de pré-entraîner et d'instruction-tuner des LLMs. Le fine-tuning, en revanche, peut être abordable pour beaucoup plus d'acteurs, pour peu qu'ils répondent à certaines exigences techniques (cf. partie sur le fine-tuning).

Pour donner des ordres de grandeur, la petite version du dernier modèle de Meta, Llama-3 8B, a été pré-entraîné et instruction-tuné sur un corpus de 15 trillions de tokens. Ces deux phases d'entraînement ont nécessité 1,3 millions d'heures GPU, réparties sur plusieurs milliers de GPU H100.

- [Article résumant la dualité pré-entraînement/fine-tuning](https://www.entrypointai.com/blog/pre-training-vs-fine-tuning-vs-in-context-learning-of-large-language-models/)

#### 2. Architectures principales LLM

##### A. L'architecture Transformer

Introduite en 2017 dans le papier **Attention Is All You Need**, l’architecture Transformer a révolutionné le domaine du TAL. Par rapport aux RNN, les Transformers permettent un traitement efficace des séquences en parallèle, conduisant à un temps de calcul beaucoup plus court (tant lors de l’entraînement qu’en inférence), tandis que les RNN, par construction, ne peuvent traiter une séquence que séquentiellement, c’est-à-dire token par token. En outre, le mécanisme d’auto-attention, présenté ci-dessous, permet de capturer efficacement les dépendances distantes en atténuant le problème de la disparition et de l’explosion des gradients.

[<img src="../images/transformer_architecture.png" width="250"/>](Architecture Transformer)

L’auto-attention est le mécanisme central des Transformers. Elle est utilisée pour pondérer, lors de l’examen d’un token en particulier, l’importance, relative à ce token, de chaque autre token de la séquence. Concrètement, trois vecteurs (qui représentent chacun la séquence d’entrée dans un rôle différent) sont déduits de la séquence d’entrée $X$ : les requêtes ($Q$), les clés ($K$) et les valeurs ($V$), par des transformations linéaires comme exprimées dans l’équation suivantes. Les matrices $W_Q$, $W_K$ et $W_V$ sont des paramètres entraînables du modèle.
$$Q = X \cdot W_Q \qquad K = X \cdot W_K \qquad V = X \cdot W_V $$

Les scores d’attention sont ensuite calculés selon l’équation suivante.
$$\text{Attention}(Q, K, V) = \text{softmax} \left( \frac{QK^{T}}{\sqrt{d}} \right) V$$

Pour chaque token d’entrée $X_i$, le résultat $\text{Attention}(Q, K, V)_i$ est une combinaison de tous les autres éléments de la séquence, pondérés selon leur pertinence par rapport à $X_i$.

L’auto-attention telle que présentée ci-dessus n’est cependant pas directement utilisée dans l’architecture Transformer. A la place, une extension, appelée attention multi-têtes, permet au modèle de capturer plusieurs aspects des relations et des dépendances entre les éléments de la séquence d’entrée. Cela est fait en transformant la séquence d’entrée en plusieurs têtes, i.e. en plusieurs vecteurs de requêtes, de clés et de valeurs, et en appliquant un mécanisme d’auto-attention sur chacune de ces têtes. Les vecteurs d’attention de chaque tête sont ensuite concaténés et réduits linéairement à la taille d’entrée d’origine. Le calcul de l’attention multi-têtes est détaillé dans l’équation suivante.

$$\text{MultiHeadAttention}(Q, K, V) = \text{Concat}(\text{head}_1 , \cdots, \text{head}_h)W^O$$

où $\text{head}_i = \text{Attention}(X \cdot W_Q^i, X \cdot W_K^i, X \cdot W_V^i)$ pour $i = 1, \cdot, h$ avec $h$ le nombre de têtes d’attention. Chaque tête d’attention peut donc se spécialiser dans un aspect spécifique des données, et le modèle peut apprendre à combiner ces différents aspects pour une meilleure représentation. La combinaison de ce mécanisme d’attention multi-têtes, de couches de normalisation et de couches à action directes (FNN) forme un bloc Transformer.

Plusieurs blocs (6 dans l’implémentation originale) forment ensuite l’encodeur (qui a accès à la séquence d’entrée dans son intégralité) et le décodeur (qui a accès à la représention encodée de la séquence d’entrée, et à la séquence de sortie générée jusqu’alors). La combinaison de ces deux éléments composent le Transformer encodeur-décodeur original.

- [Papier original **'Attention Is All You Need'**](https://arxiv.org/abs/1706.03762)
- [Explication illustrée et très détaillée](http://jalammar.github.io/illustrated-transformer/)

##### B. Encoder-only, encoder-decoder, decoder-only

Les LLMs basés sur des architectures Transformers appartiennent à l’une des 3 catégories suivantes :

- **Modèle « encoder-only »** : Ils sont basés uniquement sur la partie décodeur des Transformers. Leur pré-entraînement est souvent basé sur la reconstruction de phrases : à chaque étape, le modèle a accès à une phrase entière, sauf certains mots qui ont été masqués, et apprend à retrouver ces mots masqués. Ces modèles sont adaptés pour des tâches de classification, de reconnaissance d’entités nommées (NER), de réponses aux questions, etc. Ils ont aujourd’hui perdu en popularité, mais leurs représentants les plus connus (BERT, RoBERTa, DistilBERT, CamemBERT, etc.) sont encore très utilisés, et restent un choix intéressant selon la tâche, grâce à leur compréhension fine du langage et à leur petite taille.

- **Modèle « decoder-only »** : Ils sont basés uniquement sur la partie décodeur des Transformers. Ces modèles sont aujourd’hui la norme, et l’immense majorité des LLMs actuels utilisent cette architecture. Leur pré-entraînement est basé sur la prédiction du prochain token : à chaque étape, le modèle a accès au début d’une phrase, et apprend à prédire le token suivant. Pour cette raison, ces modèles sont également qualifiés d’« autorégressifs ». Les modèles GPT (2, 3, 4), Llama (2, 3), Mistral, Gemini, etc. sont tous des decoder-only.

- **Modèle « encoder-decoder »** : Ils utilisent les deux blocs des Transformers. L'encodeur a ainsi accès à l'intégralité de la séquence d'entrée, alors que le décodeur a accès à la représentation cachée de l'entrée et aux tokens générés jusqu'alors. Les modèles les plus connus sont par exemple BART et T5.

https://medium.com/artificial-corner/discovering-llm-structures-decoder-only-encoder-only-or-decoder-encoder-5036b0e9e88

##### C. Mixture of Experts (MoE)

Les architectures Mixture of Experts ne sont pas spécifiques aux LLMs, mais elles ont été adaptées avec succès sur des modèles comme Mixtral 8x7B, Mixtral 8x22B ou GPT-4 (supposition). Le principe est de remplacer chaque réseau à propagation directe (présent dans chaque bloc de l'architecture Transformer) par un ensemble de réseaux « experts ». Au moment de passer dans cette partie du réseau, un routeur envoie vers un de ces experts uniquement. L'intérêt est double : un seul expert étant utilisé à la fois, le temps d'inférence est naturellement nettement plus court. Par ailleurs, chaque réseau expert est entraîné et donc spécialisé différement des autres : pour un même nombre de paramètres, les performances sont donc supposées être meilleures qu'avec une architecture classique. En revanche, si tous les poids du modèles ne sont pas utilisés systématiquement, c'est uniquement à l'inférence et à chaque couche du réseau que l'expert est choisi : il est donc tout de même nécessaire de charger l'intégralité des poids du modèle en mémoire, ce qui peut être très coûteux en VRAM. Pour une explication plus technique, l'article suivant détaille très bien les MoE en prenant l'exemple de Mixtral.

[<img src="../images/moe_layer.png" width="500"/>](Une couche d'un réseau MoE)

Explication détaillée des MoE (exemple de Mixtral) : https://huggingface.co/blog/moe

##### D. Nouvelles architectures : Mamba, Jamba, etc.

Le principal inconvénient architectural des Transformers est leur complexité quadratique par rapport à la taille de l'entrée (qui vient du calcul quadratique de l'attention). **Mamba** est une architecture récente (Décembre 2023) qui s'affranchit du mécanisme d'attention, au profit de briques SSM (Structured State Space Models). L'intérêt principal de cette architecture est sa complexité linéaire par rapport à la taille de l'entrée.

**Jamba** est une nouvelle architecture hybride, à mi-chemin entre le Transformer et Mamba. Cela semble permettre un niveau de performance élevé, une gestion des contextes très longs, un temps d'inférence nettement plus court, et des exigences mémoires bien moindres.

Liens des papiers originaux :

- [Mamba](https://arxiv.org/abs/2312.00752)
- [Jamba](https://arxiv.org/abs/2403.19887)

####	b. Méthodes de fine-tuning  (Conrad)

Les LLM sont des réseaux de neurones de taille importante et font l'objet d'entraînement avec des ressources colossales (*e.g*: quelques dizaines de milliers de GPUs dernier modèle pendant 3 mois pour `GPT-4`). L'entraînement permet d'apprendre un jeu de données particulier, en réglant l'ensemble des poids du modèles (*e.g*: `Mixtral 8x22B` est une architecture à 141 milliards de poids; 175 milliards pour `GPT-3`). Les LLM sont entraînés à répondre à plusieurs tâches génériques et ne sont pas forcément pertinent pour des cas d'utilisation particulier.

Pour répondre à ce besoin, plusieurs méthodes relevant du principe de fine-tuning sont possibles. Le fine-tuning consiste à reprendre un modèle déjà entraîné et à l'adapter sur un jeu de données particulier sur une ou plusieurs tâches spécifiques. En général, il s'agit de modifier une partie ou l'ensemble des poids pour que le modèle soit plus précis pour les tâches voulues. Le fine-tuning garde en grande partie les bénéfices de l'entraînement initial, *i.e* les connaissances antérieures déjà apprises. Repartir d'un modèle déjà entraîné pourra réduire le temps d'entraînement requis pour le fine-tuning, en fonction de la similarité entre la nouvelle tâche souhaitée et son jeu de données et les entraînements précédents.

Pour des petits modèles de langages, il est possible de ré-entraîner en modifiant l'ensemble des poids. Pour des modèles plus grands, modifier l'ensemble des poids peut s'avérer couteux en temps et en GPUs. Plusieurs approches permettent de ré-entraîner à moindre coût :

* réentrainer seulement un sous-ensemble de poids
* modifier la tête de modélisation de la langue (`lm_head`) pour certains modèles, soit en réentrainant depuis les poids entraînés, soit en réinitialisant ces poids.
* garder l'intégralité du modèle et rajouter des poids à entraîner puis utiliser l'approximation de bas rang avec `LORA` (`Low-Rank Adaptation`) pour l'entraînement et l'inférence.
* utiliser des versions quantisées, i.e. des modèles où les poids ont été tronqués à une précision inférieure (possibilité de combiner avec la technique précédente, sous le nom de qLORA).

Entraînement avec qLORA en pratique :

En plus de la librairie `transformers` et `datasets`, les librairies `peft`, `bitsandbytes` et `trl` permettent de simplifier l'entraînement avec qLORA

(inspiré du [notebook suivant](https://www.kaggle.com/code/kingabzpro/mistral-7b-instruct-4bit-qlora-fine-tuning) )

```python
%%capture
%pip install -U bitsandbytes
%pip install -U transformers
%pip install -U peft
%pip install -U trl
%pip install -U sentencepiece
%pip install -U protobuf

from transformers import AutoModelForCausalLM, AutoTokenizer,TrainingArguments
from peft import LoraConfig, prepare_model_for_kbit_training, get_peft_model
from datasets import load_dataset
import torch
from trl import SFTTrainer

base_model = "teknium/OpenHermes-2.5-Mistral-7B"
new_model = "Mistral-7b-instruct-teletravail"

path_to_training_file="Dataset_public_accords_teletravail_Dares_train.parquet"
path_to_test_file="Dataset_public_accords_teletravail_Dares_test.parquet"


dataset=load_dataset("parquet", data_files={'train': path_to_training_file, 'test': path_to_test_file})

bnb_config = BitsAndBytesConfig(
    load_in_4bit= True,
    bnb_4bit_quant_type= "nf4",
    bnb_4bit_compute_dtype= torch.bfloat16,
    bnb_4bit_use_double_quant= False,
)

model = AutoModelForCausalLM.from_pretrained(
        base_model,
        quantization_config=bnb_config,
        torch_dtype=torch.bfloat16,
        device_map="auto",
        trust_remote_code=True,
)
model.config.use_cache = False # silence the warnings. Please re-enable for inference!
model.config.pretraining_tp = 1
model.gradient_checkpointing_enable()

# Load tokenizer
tokenizer = AutoTokenizer.from_pretrained(base_model, trust_remote_code=True)
tokenizer.padding_side = 'right'
tokenizer.pad_token = tokenizer.eos_token
tokenizer.add_eos_token = True
tokenizer.add_bos_token, tokenizer.add_eos_token


model = prepare_model_for_kbit_training(model)
peft_config = LoraConfig(
    lora_alpha=16,
    lora_dropout=0.1,
    r=64,
    bias="none",
    task_type="CAUSAL_LM",
    target_modules=["q_proj", "k_proj", "v_proj", "o_proj","gate_proj"]
)
model = get_peft_model(model, peft_config)

training_arguments = TrainingArguments(
    output_dir="./results",
    num_train_epochs=1,
    per_device_train_batch_size=4,
    gradient_accumulation_steps=1,
    optim="paged_adamw_32bit",
    save_steps=25,
    logging_steps=25,
    learning_rate=2e-4,
    weight_decay=0.001,
    fp16=False,
    bf16=False,
    max_grad_norm=0.3,
    max_steps=-1,
    warmup_ratio=0.03,
    group_by_length=True,
    lr_scheduler_type="constant",
)

trainer = SFTTrainer(
    model=model,
    train_dataset=dataset["train"],
    peft_config=peft_config,
    max_seq_length= None,
    dataset_text_field="text",
    tokenizer=tokenizer,
    args=training_arguments,
    packing= False,
)

trainer.train()

trainer.model.save_pretrained(new_model)

```



#### 3. Méthodes de fine-tuning

##### A. Fine-tuning supervisé

###### a. Fine-tuning complet

- [Implémentation HuggingFace](https://huggingface.co/docs/transformers/training)

###### b. Fine-tuning efficace (PEFT) : LoRA, QLoRA, DoRA, etc.

PEFT = Parameter-Efficient Fine-Tuning | LoRA = Low-Rank Adaptation | QLoRA = Quantized Low-Rank Adaptation | DoRA = Weight-Decomposed Low-Rank Adaptation

Ré-entraîner entièrement un LLM est très coûteux en termes d'infrastructure et de données, et n'est donc pas à la portée de n'importe quelle organisation. Des méthodes « efficaces » ont été créées pour rendre le fine-tuning facilement accessible, dont la plus connue et la plus populaire est LoRA (Low-Rank Adaptation). Son fonctionnement repose sur deux éléments :

- **L'adaptation** : Les poids du modèle pré-entraîné sont gelés pendant l'entraînement. Ce sont des poids supplémentaires (ceux de l'adapteur) qui vont être entraînés. Cela permet de garder l'entièreté du modèle pré-entraîné tel quel, et de rajouter uniquement la partie spécifique à chaque tâche. Entre autres, il est ainsi possible, avec un seul modèle de base, d'héberger plusieurs modèles spécialisés à moindre coût. Le papier [LoRA Land](https://arxiv.org/abs/2405.00732) explique d'ailleurs comment faire tenir 25 versions de Mistral 7B fine-tunés avec LoRA sur un seul GPU A100.

- **Le rang faible** : Les poids additionnels peuvent être choisis de beaucoup de manières. Avec LoRA, certaines couches du modèle (les couches d'attention ou les couches linéaires par exemple) sont sélectionnées, et les poids de ces couches sont exprimés comme une multiplication de deux matrices de rangs faibles, ce qui réduit grandement le nombre de poids à entraîner (la valeur de ce rang étant un hyperparamètre de l'entraînement). En fonction de la valeur de ce rang et des couches sélectionnées, il est ainsi possible d'entraîner uniquement 1 ou 2 % du nombre de paramètres global du modèle pré-entraîné, sans que cela n'affecte trop les performances du fine-tuning.

[<img src="../images/regular_vs_lora_finetuning.png" width="500"/>](Fine-tuning complet VS Fine-Tuning LoRA)

D'autres approches de PEFT (Parameter-Efficient Fine-Tuning) ont vu le jour, dont la plupart s'inspirent de LoRA. Parmi les plus connues, QLoRA permet d'appliquer LoRA sur des modèles quantifiés, et DoRA propose un raffinement de l'adapteur de LoRA.

- [Guide théorique très clair sur le PEFT (principe, avantages, etc.) avec un focus sur LoRA](https://www.leewayhertz.com/parameter-efficient-fine-tuning/)
- [Guide pratique / Implémentation HugginFace](https://huggingface.co/blog/gemma-peft)

Liens des papiers originaux :
- [LoRA](https://arxiv.org/abs/2106.09685)
- [QLoRA](https://arxiv.org/abs/2305.14314)
- [DoRA](https://arxiv.org/abs/2402.09353)

##### B. RLHF et RLAIF

Le fine-tuning supervisé est très efficace dans de nombreux cas, mais il présente notamment l'inconvénient de nécessiter une quantité importante de données. La constitution d'une base de questions-réponses attendues par exemple peut se réveler coûteuse. Un autre moyen d'améliorer un modèle est d'utiliser de l'apprentissage par renforcement. La première version utilisée pour ré-entraîner un LLM est le RLHF (Reinforcement Learning from Human Feedback), qui consiste à récolter des retours d'utilisateurs humains (typiquement, entre deux réponses générées par un LLM, l'utilisateur va dire laquelle il préfère), puis à mettre à jour les poids du modèle, par un algorithme d'apprentissage par renforcement, de telle sorte que la réponse préférée par l'utilisateur ait plus de chances d'être générée. Cette approche s'est révélée particulièrement effiace pour « aligner » le modèle aux préférences humaines, en termes de biais, de toxicité, de style, etc.

Bien que la constitution d'une base de retours humains soit moins coûteuse que celle d'une base de questions/réponses, elle reste coûteuse. Une solution aujourd'hui très populaire est de remplacer ces retours humains par des retours générés artificiellement, ce qui donne une approche appelée RLAIF (Reinforcement Learning from Artificial Intelligence Feedback). Typiquement, un LLM plus performant (par exemple GPT-4) va être utilisé pour déterminer la meilleure réponse entre deux ou plusieurs choix, selon des critères donnés. Ce sont ensuite ces retours qui vont être utilisés pour améliorer le modèle grâce à l'algorithme d'apprentissage par renforcement.

RLHF = Reinforcement Learning from Human Feedback | RLAIF = Reinforcement Learning from Artificial Intelligence Feedback

- [Introduction au RLHF](https://huggingface.co/blog/rlhf)

###### a. PPO

PPO = Proximal Policy Optimization

- [Explication théorique](https://huggingface.co/blog/deep-rl-ppo)
- [Implémentation HuggingFace](https://huggingface.co/docs/trl/main/en/ppo_trainer)

https://medium.com/@oleglatypov/a-comprehensive-guide-to-proximal-policy-optimization-ppo-in-ai-82edab5db200

###### b. DPO, KTO



DPO = Direct Preference Optimization | KTO = Kahneman-Tversky Optimization

- [Explication théorique](https://huggingface.co/blog/pref-tuning)
- [Guide pratique / Implémentation HugginFace](https://huggingface.co/blog/dpo-trl)

Liens des papiers originaux :
- [DPO](https://arxiv.org/abs/2305.18290)
- [KTO](https://arxiv.org/abs/2402.01306)

##### C. Fine-tuning d'embeddings

Cf. partie sur la RAG.


##### D. Divers

###### a. Prompt-tuning

- [Lien du papier](https://arxiv.org/abs/2104.08691)

###### b. ReFT et LoReFT



ReFT = Representation Fine-Tuning | LoReFT = Low-Rank Linear Subspace ReFT

- [Lien du papier](https://arxiv.org/abs/2404.03592)

#### 4. Prompt engineering

##### A. Bonnes pratiques

Il faut avant tout garder à l'esprit que le prompt engineering est une discipline très empirique, qui demande beaucoup d'itérations pour obtenir le meilleur prompt par rapport au résultat souhaité. Bien qu'il n'existe pas de méthode systématique et efficace pour optimiser un prompt, certaines pratiques sont devenues la norme. Par exemple, voici quelques bonnes pratiques :
- **Donner un rôle au modèle** : Par exemple, dire au modèle qu'il est un magistrat honnête et impartial pourra l'aider à générer du texte formel, neutre et juridique. Le rôle est bien sûr à adapter en fonction des exigences de chaque tâche.
- **Structurer le prompt** : Il est important de bien différencier le *prompt système* du *prompt utilisateur*. Le premier donnera des instructions générales quant au style, à la tâche, au contexte, etc., alors que le second pourra donner des instructions spécifiques ou un texte à analyser. Il est également pertinent d'organiser ou de séparer clairement les instructions.
- **Etre le plus précis possible** :
- **Contraindre le modèle au maximum** :
- **Donner des exemples** : Cf. paragraphe suivant.

Le papier [Principled Instructions Are All You Need for Questioning LLaMA-1/2, GPT-3.5/4](https://arxiv.org/abs/2312.16171) donne un certains nombre de principes pour améliorer les prompts. Parmi ces principes (très nombreux), on trouve par exemple :
- Ne pas etre poli avec le LLM si l'on souhaite une réponse concise.
- Décrire l'audience souhaitée dans le prompt (des experts techniques, des enfants, etc.).
- Utiliser des directives affirmatives (fais ceci), et éviter les tournures négatives (ne fais pas cela).
- Employer des phrases telles que 'Ta tache est de' ou 'Tu DOIS'.
- Répéter plusieurs fois certains mots ou phrases essentielles.



##### B. 0-shot, 1-shot, few-shot prompting

La façon la plus intuitive d'adresser une requête à un LLM est de formuler des instructions les plus précises possibles. Ce faisant, on espère que le modèle comprendra ces instructions et répondra en conséquence. Pour des tâches nouvelles, auxquelles le modèle n'a pas nécessairement été confronté durant son (pré)-entraînement, on appelle cette méthode du 0-shot prompting : le modèle n'a pas de référence ou d'exemple de réponse attendue.

Pour pallier ce manque de référence, il est possible (et, en fonction de la tâche, souvent recommandé) d'ajouter des exemples de paires entrée/sortie dans le prompt que l'on adresse au modèle : cela donne du 1-shot (un exemple) ou du few-shot (plusieurs exemples) prompting. Plus les exemples sont proches de la requête initiale, plus le modèle saura précisément comment répondre. Cela permet ainsi au modèle de s'adapter, à moindre coût, à une tâche très spécifique ou particulière.

- [Guide pratique (avec exemples)](https://www.prompthub.us/blog/the-few-shot-prompting-guide)

##### C. Chain of Thought (CoT) reasoning

Sur certaines tâches qui demandent un raisonnement (par exemple la résolution d'un problème mathématique simple), les LLM naturellement ne sont pas très bons. Pour augmenter leurs capacités de raisonnement, une stratégie classique consiste à leur demander de raisonner et de réfléchir étape par étape.

Les modèles les plus récents ayant nettement progressé en raisonnement, il est possible qu'ils raisonnent naturellement étape par étape sur des questions simples. Pour des questions ou des raisonnements plus complexes, il sera cependant probablement plus efficace de proposer une logique de raisonnement au modèle, en explicitant les différentes étapes.

Il est également possible de combiner le CoT reasoning avec du few-shot prompting, *i.e.* de donner des exemples de raisonnement étape par étape au modèle.

- [Guide détaillé](https://www.mercity.ai/blog-post/guide-to-chain-of-thought-prompting)

##### D. RAG

RAG = Retrieval Augmented Generation

Le principe est de rajouter du contexte dans le prompt du LLM, pour lui donner accès à des données spécifiques et pertinentes. Cf. partie sur la RAG.

##### E. Reverse prompt engineering

Une façon de travailler ses prompts est de profiter des capacités génératives des LLMs pour leur faire créer des prompts. L'idée est de donner au LLM un exemple de sortie souhaitée, et de lui demander de générer le prompt le plus adapté possible pour produire cette sortie.

- [Guide pratique](https://bootcamp.uxdesign.cc/why-reverse-prompt-engineering-is-the-magic-key-to-production-ready-prompts-9d4c2c5b2e8b)

#### 5. Quoi faire quand ?

##### A. Utiliser un LLM

La première question à se poser est la nécessité ou non d’utiliser un LLM. Certaines tâches peuvent se résoudre avec un LLM, mais ce n’est pas toujours la solution la plus pertinente. Par exemple, un LLM est normalement capable de parser un fichier xml sans problème, mais un script naïf sera largement aussi efficace, à bien moindre coût (environnemental, humain, financier). L’utilisation d’un LLM doit venir d’un besoin de compréhension fine du langage naturel.

**Donner quelques exemples de cas d'usages**

##### B. Quel(s) modèle(s) utiliser

Beaucoup d’éléments sont à prendre en compte lors du choix du modèle à utiliser. Parmi les plus importants :

- **Sa taille** : Exprimée généralement en milliards (B) de paramètres (Llama-3 8B possède 8 milliards de paramètres, Mistral 7B en possède 7 milliards, etc.), elle influe fortement sur les performances du modèles et les exigences techniques. Un « petit » LLM de 8 milliards de paramètres pourra tourner sur un GPU modeste avec une VRAM de 32 GB (voire moins si l’on utilise un modèle quantifié, cf. …), tandis qu’un LLM de taille moyenne de 70 milliards de paramètres nécessitera 2 GPU puissants avec 80 GB de VRAM.

- **Son multilinguisme** : La plupart des modèles sont entraînés sur une immense majorité de données anglaises (plus de 90 % pour Llama-2, contre moins de 0,1 % de données françaises). Les modèles incluant plus de français (Mistral ?) dans leurs données d’entraînement sont naturellement plus efficaces sur du français.

- **Son temps d’inférence** : Généralement directement lié à la taille du modèle, certaines architectures (MoE) permettent cependant d’avoir un temps d’inférence plus court.

- **Ses performances générales** : Beaucoup de benchmarks publics évaluent les LLMs sur des tâches généralistes et variées. Un bon point de départ est de regarder [le Leaderboard](https://chat.lmsys.org/?leaderboard) qui recense la plupart des modèles connus.

- **Ses performances spécifiques** : Les benchmarks généralistes ne sont pas forcément pertinents pour certains cas d’usages, car ils ne sont pas spécifiques à la tâche, aux données, etc. Il peut être intéressant de développer un pipeline d’évaluation spécifique (cf…).

En juin 2024, un bon point de départ est de regarder les modèles open-source de Meta (Llama-2 7B/13B/70B, Llama-3 8B/70B) et de Mistral AI (Mistral 7B, Mixtral 8x7B).

##### C. Quand faire du prompt engineering

Si vous êtes dans l'un des cas suivants, le prompt engineering peut être une bonne option :

- Pas beaucoup de ressources disponibles
- Besoin d'un outil laissé à la disposition des utilisateurs, avec une grande liberté
- Les réponses requises sont très formattées ou très spécifiques

##### D. Quand faire de la RAG

Si vous êtes dans l'un des cas suivants, la RAG peut être une bonne option :

- Besoin de réponses à jour, régulièrement et facilement actualisées
- Besoin de sourcer les réponses ou de diminuer les hallucinations
- Besoin d'enrichir les réponses avec des données spécifiques
- Besoin d'une application qui ne dépend pas d'un modèle spécifique (généralisabilité), et dont les utilisateurs ne connaissent pas l'IA générative

##### E. Quand faire du fine-tuning

Si vous êtes dans l'un des cas suivants, le fine-tuning peut être une bonne option :

- Besoin d'une terminologie ou d'un style spécifique
- Besoin d'enrichir les réponses avec des données spécifiques
- Ressources (GPU, data scientists) disponibles
- Données disponibles en quantité et qualité suffisantes
- Besoin d'une application qui ne dépend pas d'un modèle spécifique (généralisabilité), et dont les utilisateurs ne connaissent pas l'IA générative

##### F. Combiner plusieurs techniques

RAG + fine-tuning = [RAFT](https://arxiv.org/abs/2403.10131)
